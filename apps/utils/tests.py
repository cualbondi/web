from .fix_way import fix_way
from django.test import TestCase
from django.contrib.gis.geos import GEOSGeometry


POSITIVE = """
    LINESTRING(
        -57.93176591794997 -34.92797747797999,
        -57.93880403440505 -34.92248841780390,
        -57.94996202390700 -34.91474681147465,
        -57.96180665891677 -34.90587825610113,
        -57.97056138914138 -34.89968377625544,
        -57.97141969602614 -34.89901502605655,
        -57.97828971360718 -34.89309542071704,
        -57.98961936448609 -34.88549185620056
    )
"""

POSITIVE = ' '.join(POSITIVE.split())

PASS_CASES = [

    # 1 JOINED (1 2 3 4 - 4 5 6 7 8)
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544,
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,

    # 2 JOINED REVERSED (1 2 3 4 - 8 7 6 5 4)
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.98961936448609 -34.88549185620056,
                -57.97828971360718 -34.89309542071704,
                -57.97141969602614 -34.89901502605655,
                -57.97056138914138 -34.89968377625544,
                -57.96180665891677 -34.90587825610113
            )
        )
    """,

    # 3 JOINED ALL REVERSED (4 3 2 1 - 6 5 4 - 8 7 6)
    """
        MULTILINESTRING(
            (
                -57.96180665891677 -34.90587825610113,
                -57.94996202390700 -34.91474681147465,
                -57.93880403440505 -34.92248841780390,
                -57.93176591794997 -34.92797747797999
            ),
            (
                -57.97141969602614 -34.89901502605655,
                -57.97056138914138 -34.89968377625544,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.98961936448609 -34.88549185620056,
                -57.97828971360718 -34.89309542071704,
                -57.97141969602614 -34.89901502605655
            )
        )
    """,

    # 4 GAP 100 meters
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544
            ),
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,

    # 5 GAP 100 meters reversed
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544
            ),
            (
                -57.98961936448609 -34.88549185620056,
                -57.97828971360718 -34.89309542071704,
                -57.97141969602614 -34.89901502605655
            )
        )
    """
]

NOT_PASS_CASES = [
    # GAP 1000 meters
    """
        MULTILINESTRING(
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            ),
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            )
        )
    """,

    # GAP 1000 meters reversed
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,
]

for i, case in enumerate(PASS_CASES):
    PASS_CASES[i] = ' '.join(case.split())

for i, case in enumerate(NOT_PASS_CASES):
    NOT_PASS_CASES[i] = ' '.join(case.split())

TOLERANCE = 150

point_names = {
    (-57.93176591794997, -34.92797747797999): "1",
    (-57.93880403440505, -34.92248841780390): "2",
    (-57.94996202390700, -34.91474681147465): "3",
    (-57.96180665891677, -34.90587825610113): "4",
    (-57.97056138914138, -34.89968377625544): "5",
    (-57.97141969602614, -34.89901502605655): "6",
    (-57.97828971360718, -34.89309542071704): "7",
    (-57.98961936448609, -34.88549185620056): "8"
}


def stringify(mls):
    if isinstance(mls, str):
        mls = GEOSGeometry(mls)
    ans = ''
    if mls.geom_type == 'MultiLineString':
        for ls in mls:
            for point in ls:
                ans += point_names[point] + ' '
            ans += '- '
        ans = ans[:-2]
    if mls.geom_type == 'LineString':
        for point in mls:
            ans += point_names[point] + ' '
    return ans

class FixWayTestCase(TestCase):

    def test_fix_ways(self):
        """Fix all positive ways"""
        positive = GEOSGeometry(POSITIVE)
        i = 0
        for case in PASS_CASES:
            i += 1
            fixed = fix_way(case, TOLERANCE)
            print('case # ', i)
            print('before fix: ', stringify(case))
            print('after fix: ', stringify(fixed))
            self.assertSequenceEqual(fixed, positive, msg='[#{}] {}'.format(i, case))

    def test_not_fix_ways(self):
        """Won't fix negative ways"""
        for case in NOT_PASS_CASES:
            self.assertIsNone(fix_way(case, TOLERANCE))
