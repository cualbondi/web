from .fix_way import fix_way
from django.test import TestCase
from django.contrib.gis.geos import GEOSGeometry


POSITIVE = """
    LINESTRING(
        -57.93176591794997 -34.92797747797999,
        -57.93880403440505 -34.92248841780390,
        -57.94996202390700 -34.91474681147465,
        -57.96180665891677 -34.90587825610113,
        -57.97056138914138 -34.89968377625544,
        -57.97141969602614 -34.89901502605655,
        -57.97828971360718 -34.89309542071704,
        -57.98961936448609 -34.88549185620056
    )
"""

POSITIVE = ' '.join(POSITIVE.split())

PASS_CASES = [

    # 1 JOINED
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544,
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,

    # 2 JOINED REVERSED
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.98961936448609 -34.88549185620056,
                -57.97828971360718 -34.89309542071704,
                -57.97141969602614 -34.89901502605655,
                -57.97056138914138 -34.89968377625544,
                -57.96180665891677 -34.90587825610113
            )
        )
    """,

    # 3 JOINED ALL REVERSED
    """
        MULTILINESTRING(
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            ),
            (
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544,
                -57.97141969602614 -34.89901502605655
            ),
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            )
        )
    """,

    # 4 GAP 100 meters
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544
            ),
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,

    # 5 GAP 100 meters reversed
    """
        MULTILINESTRING(
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            ),
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113,
                -57.97056138914138 -34.89968377625544
            )
        )
    """
]

NOT_PASS_CASES = [
    # GAP 1000 meters
    """
        MULTILINESTRING(
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            ),
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            )
        )
    """,

    # GAP 1000 meters reversed
    """
        MULTILINESTRING(
            (
                -57.93176591794997 -34.92797747797999,
                -57.93880403440505 -34.92248841780390,
                -57.94996202390700 -34.91474681147465,
                -57.96180665891677 -34.90587825610113
            ),
            (
                -57.97141969602614 -34.89901502605655,
                -57.97828971360718 -34.89309542071704,
                -57.98961936448609 -34.88549185620056
            )
        )
    """,
]

for i, case in enumerate(PASS_CASES):
    PASS_CASES[i] = ' '.join(case.split())

for i, case in enumerate(NOT_PASS_CASES):
    NOT_PASS_CASES[i] = ' '.join(case.split())

TOLERANCE = 150


class FixWayTestCase(TestCase):

    def test_fix_ways(self):
        """Fix all positive ways"""
        positive = GEOSGeometry(POSITIVE)
        i = 0
        for case in PASS_CASES:
            i += 1
            self.assertSequenceEqual(fix_way(case, TOLERANCE), positive, msg='[#{}] {}'.format(i, case))

    def test_not_fix_ways(self):
        """Won't fix negative ways"""
        for case in NOT_PASS_CASES:
            self.assertIsNone(fix_way(case, TOLERANCE))
